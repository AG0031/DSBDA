import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

Data Cleaning

df = pd.read_csv("heart.csv")

print("Original Data:")
print(df.info())

# Check for missing values
print("\nMissing values:\n", df.isnull().sum())

# Fill missing values if any (none expected in heart.csv)
df = df.fillna(df.mean(numeric_only=True))

# View cleaned data
df.head()

Data Integration

#Simpulate adding an external feature 
np.random.seed(42)
df['fitness_score'] = np.random.randint(1,10,size=len(df))

#Check the updated data
df[['age', 'fitness_score']].head()


Data Transformation

#Separate features and target
X = df.drop(columns=['target'])
y = df['target']

#Scale the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=1)

Data Modeling

#Build a Logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

#Make Predictions
y_pred = model.predict(X_test)

#Evalute the model
accuracy = accuracy_score(y_test, y_pred)
print(f"\n Model Accuracy: {accuracy * 100:.2f}%")
